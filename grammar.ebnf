(* This file is exists only for the purpose of documentation *)
(* and reference. It is not used anywhere within zap. *)

(* Grammar Rules *)
(* this section has whitespace *)

zap = {opts}, {decl};

opts = "opts", [string], config-struct;

decl = (nsdecl, chdecl | fndecl | evdecl | tydecl), [';'];

nsdecl = "namespace", ident, '{', {decl}, '}';
chdecl = "channel", ident, config-struct;
fndecl = "funct", ident, config-struct, '=', (ty-list | ty), "->", (ty-list | ty);
evdecl = "event", ident, config-struct, '=', (ty-list | ty);

tydecl = "type", ident, '=', ty;

config-struct = '{', config-struct-field, [','], '}';
config-struct-field = ident, ':', config-value, [',', config-struct-field];

config-value = num
	| string
	| "true"
	| "false"
	| (ident, {'.', ident})
	| (ident, '(', config-value, {',', config-value}, [','], ')')
	| config-struct;

ty-list = '(', [ty, {',', ty}, [',']], ')';

ty = (ty-num | ty-str | ty-buf | ty-arr | ty-map | ty-ref | ty-enum | ty-struct | ty-instance), ['?'];

ty-num = ("f32" | "f64"), [range-num]
	| ("u8" | "u16" | "u32" | "i8" | "i16" | "i32"), [range-int];

ty-str = "string", [range-int];
ty-buf = "buffer", [range-int];
ty-arr = '[', ty, ']', [range-int];
ty-map = '[', ty, ':', ty, ']', [range-int];
ty-ref = ident, {'.', ident};

ty-struct = "struct", struct;

ty-enum = "enum", enum-unit | enum-tagged;

ty-instance = "Instance", ['(', string, ')'];

enum-unit = '{', ident, {',', ident}, [','], '}';
enum-tagged = string, '{', ident, struct, {',', ident, struct}, ((',', "..", struct, [',']) | [',']), '}';

struct-field = ident, ':', ty, [',', struct-field];
struct = '{', struct-field, [','], '}';

range-num = '(', (
	num, "..", num
	| num, ".."
	| "..", num
	| ".."
	| num
), ')';

range-int = '(', (
	int, "..", int
	| int, ".."
	| "..", int
	| ".."
	| int
), ')';

(* Lexical Rules *)
(* this section has no whitespace *)

ident = alpha | '_', {alphanum | '_'};

(* While string may only show alphanumeric characters *)
(* it accepts any characters, including unicode *)
string = '"', {alphanum}, '"'
	| "'", {alphanum}, "'";

num = int, ['.', int];
int = digit, {digit};

alphanum = alpha | digit;

alpha = 'a'..'z' | 'A'..'Z';
digit = '0'..'9';
